<?php
/**
 * Promotion
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.11.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Client\Model;

use \ArrayAccess;
use \MyDHL\Client\ObjectSerializer;

/**
 * Promotion Class Doc Comment
 *
 * @category Class
 * @description Promotion on a SVP level
 * @package  MyDHL\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Promotion implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Promotion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'country_code' => 'string',
        'partner_type_code' => 'string',
        'service_point_id' => 'string',
        'client_id' => 'string',
        'capability' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'day_of_week' => 'string',
        'text' => 'string',
        'button_text' => 'string',
        'language_code1' => 'string',
        'text1' => 'string',
        'button_text1' => 'string',
        'language_code2' => 'string',
        'text2' => 'string',
        'button_text2' => 'string',
        'language_code3' => 'string',
        'text3' => 'string',
        'button_text3' => 'string',
        'hyperlink' => 'string',
        'created' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'country_code' => null,
        'partner_type_code' => null,
        'service_point_id' => null,
        'client_id' => null,
        'capability' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'day_of_week' => null,
        'text' => null,
        'button_text' => null,
        'language_code1' => null,
        'text1' => null,
        'button_text1' => null,
        'language_code2' => null,
        'text2' => null,
        'button_text2' => null,
        'language_code3' => null,
        'text3' => null,
        'button_text3' => null,
        'hyperlink' => null,
        'created' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'country_code' => false,
        'partner_type_code' => false,
        'service_point_id' => false,
        'client_id' => false,
        'capability' => false,
        'start_date' => false,
        'end_date' => false,
        'day_of_week' => false,
        'text' => false,
        'button_text' => false,
        'language_code1' => false,
        'text1' => false,
        'button_text1' => false,
        'language_code2' => false,
        'text2' => false,
        'button_text2' => false,
        'language_code3' => false,
        'text3' => false,
        'button_text3' => false,
        'hyperlink' => false,
        'created' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'country_code' => 'countryCode',
        'partner_type_code' => 'partnerTypeCode',
        'service_point_id' => 'servicePointId',
        'client_id' => 'clientId',
        'capability' => 'capability',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'day_of_week' => 'dayOfWeek',
        'text' => 'text',
        'button_text' => 'buttonText',
        'language_code1' => 'languageCode1',
        'text1' => 'text1',
        'button_text1' => 'buttonText1',
        'language_code2' => 'languageCode2',
        'text2' => 'text2',
        'button_text2' => 'buttonText2',
        'language_code3' => 'languageCode3',
        'text3' => 'text3',
        'button_text3' => 'buttonText3',
        'hyperlink' => 'hyperlink',
        'created' => 'created'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'country_code' => 'setCountryCode',
        'partner_type_code' => 'setPartnerTypeCode',
        'service_point_id' => 'setServicePointId',
        'client_id' => 'setClientId',
        'capability' => 'setCapability',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'day_of_week' => 'setDayOfWeek',
        'text' => 'setText',
        'button_text' => 'setButtonText',
        'language_code1' => 'setLanguageCode1',
        'text1' => 'setText1',
        'button_text1' => 'setButtonText1',
        'language_code2' => 'setLanguageCode2',
        'text2' => 'setText2',
        'button_text2' => 'setButtonText2',
        'language_code3' => 'setLanguageCode3',
        'text3' => 'setText3',
        'button_text3' => 'setButtonText3',
        'hyperlink' => 'setHyperlink',
        'created' => 'setCreated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'country_code' => 'getCountryCode',
        'partner_type_code' => 'getPartnerTypeCode',
        'service_point_id' => 'getServicePointId',
        'client_id' => 'getClientId',
        'capability' => 'getCapability',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'day_of_week' => 'getDayOfWeek',
        'text' => 'getText',
        'button_text' => 'getButtonText',
        'language_code1' => 'getLanguageCode1',
        'text1' => 'getText1',
        'button_text1' => 'getButtonText1',
        'language_code2' => 'getLanguageCode2',
        'text2' => 'getText2',
        'button_text2' => 'getButtonText2',
        'language_code3' => 'getLanguageCode3',
        'text3' => 'getText3',
        'button_text3' => 'getButtonText3',
        'hyperlink' => 'getHyperlink',
        'created' => 'getCreated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('partner_type_code', $data ?? [], null);
        $this->setIfExists('service_point_id', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('capability', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('day_of_week', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('button_text', $data ?? [], null);
        $this->setIfExists('language_code1', $data ?? [], null);
        $this->setIfExists('text1', $data ?? [], null);
        $this->setIfExists('button_text1', $data ?? [], null);
        $this->setIfExists('language_code2', $data ?? [], null);
        $this->setIfExists('text2', $data ?? [], null);
        $this->setIfExists('button_text2', $data ?? [], null);
        $this->setIfExists('language_code3', $data ?? [], null);
        $this->setIfExists('text3', $data ?? [], null);
        $this->setIfExists('button_text3', $data ?? [], null);
        $this->setIfExists('hyperlink', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['client_id'] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        if ($this->container['capability'] === null) {
            $invalidProperties[] = "'capability' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalidProperties[] = "'end_date' can't be null";
        }
        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique identifier for promotion
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code Country Code
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (is_null($country_code)) {
            throw new \InvalidArgumentException('non-nullable country_code cannot be null');
        }
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets partner_type_code
     *
     * @return string|null
     */
    public function getPartnerTypeCode()
    {
        return $this->container['partner_type_code'];
    }

    /**
     * Sets partner_type_code
     *
     * @param string|null $partner_type_code Partner Type code
     *
     * @return self
     */
    public function setPartnerTypeCode($partner_type_code)
    {
        if (is_null($partner_type_code)) {
            throw new \InvalidArgumentException('non-nullable partner_type_code cannot be null');
        }
        $this->container['partner_type_code'] = $partner_type_code;

        return $this;
    }

    /**
     * Gets service_point_id
     *
     * @return string|null
     */
    public function getServicePointId()
    {
        return $this->container['service_point_id'];
    }

    /**
     * Sets service_point_id
     *
     * @param string|null $service_point_id Service Point ID
     *
     * @return self
     */
    public function setServicePointId($service_point_id)
    {
        if (is_null($service_point_id)) {
            throw new \InvalidArgumentException('non-nullable service_point_id cannot be null');
        }
        $this->container['service_point_id'] = $service_point_id;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id Client ID
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets capability
     *
     * @return string
     */
    public function getCapability()
    {
        return $this->container['capability'];
    }

    /**
     * Sets capability
     *
     * @param string $capability Capability(PPC)
     *
     * @return self
     */
    public function setCapability($capability)
    {
        if (is_null($capability)) {
            throw new \InvalidArgumentException('non-nullable capability cannot be null');
        }
        $this->container['capability'] = $capability;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Promotion Start date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date Promotion End date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets day_of_week
     *
     * @return string|null
     */
    public function getDayOfWeek()
    {
        return $this->container['day_of_week'];
    }

    /**
     * Sets day_of_week
     *
     * @param string|null $day_of_week Promotion on specific day of the week
     *
     * @return self
     */
    public function setDayOfWeek($day_of_week)
    {
        if (is_null($day_of_week)) {
            throw new \InvalidArgumentException('non-nullable day_of_week cannot be null');
        }
        $this->container['day_of_week'] = $day_of_week;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text Promotion message
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets button_text
     *
     * @return string|null
     */
    public function getButtonText()
    {
        return $this->container['button_text'];
    }

    /**
     * Sets button_text
     *
     * @param string|null $button_text Promotion button text
     *
     * @return self
     */
    public function setButtonText($button_text)
    {
        if (is_null($button_text)) {
            throw new \InvalidArgumentException('non-nullable button_text cannot be null');
        }
        $this->container['button_text'] = $button_text;

        return $this;
    }

    /**
     * Gets language_code1
     *
     * @return string|null
     */
    public function getLanguageCode1()
    {
        return $this->container['language_code1'];
    }

    /**
     * Sets language_code1
     *
     * @param string|null $language_code1 Promotion Language Code
     *
     * @return self
     */
    public function setLanguageCode1($language_code1)
    {
        if (is_null($language_code1)) {
            throw new \InvalidArgumentException('non-nullable language_code1 cannot be null');
        }
        $this->container['language_code1'] = $language_code1;

        return $this;
    }

    /**
     * Gets text1
     *
     * @return string|null
     */
    public function getText1()
    {
        return $this->container['text1'];
    }

    /**
     * Sets text1
     *
     * @param string|null $text1 Promotion message
     *
     * @return self
     */
    public function setText1($text1)
    {
        if (is_null($text1)) {
            throw new \InvalidArgumentException('non-nullable text1 cannot be null');
        }
        $this->container['text1'] = $text1;

        return $this;
    }

    /**
     * Gets button_text1
     *
     * @return string|null
     */
    public function getButtonText1()
    {
        return $this->container['button_text1'];
    }

    /**
     * Sets button_text1
     *
     * @param string|null $button_text1 Promotion button text
     *
     * @return self
     */
    public function setButtonText1($button_text1)
    {
        if (is_null($button_text1)) {
            throw new \InvalidArgumentException('non-nullable button_text1 cannot be null');
        }
        $this->container['button_text1'] = $button_text1;

        return $this;
    }

    /**
     * Gets language_code2
     *
     * @return string|null
     */
    public function getLanguageCode2()
    {
        return $this->container['language_code2'];
    }

    /**
     * Sets language_code2
     *
     * @param string|null $language_code2 Promotion Language Code
     *
     * @return self
     */
    public function setLanguageCode2($language_code2)
    {
        if (is_null($language_code2)) {
            throw new \InvalidArgumentException('non-nullable language_code2 cannot be null');
        }
        $this->container['language_code2'] = $language_code2;

        return $this;
    }

    /**
     * Gets text2
     *
     * @return string|null
     */
    public function getText2()
    {
        return $this->container['text2'];
    }

    /**
     * Sets text2
     *
     * @param string|null $text2 Promotion message
     *
     * @return self
     */
    public function setText2($text2)
    {
        if (is_null($text2)) {
            throw new \InvalidArgumentException('non-nullable text2 cannot be null');
        }
        $this->container['text2'] = $text2;

        return $this;
    }

    /**
     * Gets button_text2
     *
     * @return string|null
     */
    public function getButtonText2()
    {
        return $this->container['button_text2'];
    }

    /**
     * Sets button_text2
     *
     * @param string|null $button_text2 Promotion button text
     *
     * @return self
     */
    public function setButtonText2($button_text2)
    {
        if (is_null($button_text2)) {
            throw new \InvalidArgumentException('non-nullable button_text2 cannot be null');
        }
        $this->container['button_text2'] = $button_text2;

        return $this;
    }

    /**
     * Gets language_code3
     *
     * @return string|null
     */
    public function getLanguageCode3()
    {
        return $this->container['language_code3'];
    }

    /**
     * Sets language_code3
     *
     * @param string|null $language_code3 Promotion Language Code
     *
     * @return self
     */
    public function setLanguageCode3($language_code3)
    {
        if (is_null($language_code3)) {
            throw new \InvalidArgumentException('non-nullable language_code3 cannot be null');
        }
        $this->container['language_code3'] = $language_code3;

        return $this;
    }

    /**
     * Gets text3
     *
     * @return string|null
     */
    public function getText3()
    {
        return $this->container['text3'];
    }

    /**
     * Sets text3
     *
     * @param string|null $text3 Promotion message
     *
     * @return self
     */
    public function setText3($text3)
    {
        if (is_null($text3)) {
            throw new \InvalidArgumentException('non-nullable text3 cannot be null');
        }
        $this->container['text3'] = $text3;

        return $this;
    }

    /**
     * Gets button_text3
     *
     * @return string|null
     */
    public function getButtonText3()
    {
        return $this->container['button_text3'];
    }

    /**
     * Sets button_text3
     *
     * @param string|null $button_text3 Promotion button text
     *
     * @return self
     */
    public function setButtonText3($button_text3)
    {
        if (is_null($button_text3)) {
            throw new \InvalidArgumentException('non-nullable button_text3 cannot be null');
        }
        $this->container['button_text3'] = $button_text3;

        return $this;
    }

    /**
     * Gets hyperlink
     *
     * @return string|null
     */
    public function getHyperlink()
    {
        return $this->container['hyperlink'];
    }

    /**
     * Sets hyperlink
     *
     * @param string|null $hyperlink Promotion Web link
     *
     * @return self
     */
    public function setHyperlink($hyperlink)
    {
        if (is_null($hyperlink)) {
            throw new \InvalidArgumentException('non-nullable hyperlink cannot be null');
        }
        $this->container['hyperlink'] = $hyperlink;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created Promotion created date
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


