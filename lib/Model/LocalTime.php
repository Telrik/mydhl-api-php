<?php
/**
 * LocalTime
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.11.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Client\Model;

use \ArrayAccess;
use \MyDHL\Client\ObjectSerializer;

/**
 * LocalTime Class Doc Comment
 *
 * @category Class
 * @description Array of openingHours entities, each consisting of week day, opening time and closing time.
 * @package  MyDHL\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LocalTime implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LocalTime';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'chronology' => '\MyDHL\Client\Model\Chronology',
        'hour_of_day' => 'int',
        'minute_of_hour' => 'int',
        'second_of_minute' => 'int',
        'millis_of_second' => 'int',
        'millis_of_day' => 'int',
        'fields' => '\MyDHL\Client\Model\DateTimeField[]',
        'values' => 'int[]',
        'field_types' => '\MyDHL\Client\Model\DateTimeFieldType[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'chronology' => null,
        'hour_of_day' => 'int32',
        'minute_of_hour' => 'int32',
        'second_of_minute' => 'int32',
        'millis_of_second' => 'int32',
        'millis_of_day' => 'int32',
        'fields' => null,
        'values' => 'int32',
        'field_types' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'chronology' => false,
        'hour_of_day' => false,
        'minute_of_hour' => false,
        'second_of_minute' => false,
        'millis_of_second' => false,
        'millis_of_day' => false,
        'fields' => false,
        'values' => false,
        'field_types' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'chronology' => 'chronology',
        'hour_of_day' => 'hourOfDay',
        'minute_of_hour' => 'minuteOfHour',
        'second_of_minute' => 'secondOfMinute',
        'millis_of_second' => 'millisOfSecond',
        'millis_of_day' => 'millisOfDay',
        'fields' => 'fields',
        'values' => 'values',
        'field_types' => 'fieldTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'chronology' => 'setChronology',
        'hour_of_day' => 'setHourOfDay',
        'minute_of_hour' => 'setMinuteOfHour',
        'second_of_minute' => 'setSecondOfMinute',
        'millis_of_second' => 'setMillisOfSecond',
        'millis_of_day' => 'setMillisOfDay',
        'fields' => 'setFields',
        'values' => 'setValues',
        'field_types' => 'setFieldTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'chronology' => 'getChronology',
        'hour_of_day' => 'getHourOfDay',
        'minute_of_hour' => 'getMinuteOfHour',
        'second_of_minute' => 'getSecondOfMinute',
        'millis_of_second' => 'getMillisOfSecond',
        'millis_of_day' => 'getMillisOfDay',
        'fields' => 'getFields',
        'values' => 'getValues',
        'field_types' => 'getFieldTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('chronology', $data ?? [], null);
        $this->setIfExists('hour_of_day', $data ?? [], null);
        $this->setIfExists('minute_of_hour', $data ?? [], null);
        $this->setIfExists('second_of_minute', $data ?? [], null);
        $this->setIfExists('millis_of_second', $data ?? [], null);
        $this->setIfExists('millis_of_day', $data ?? [], null);
        $this->setIfExists('fields', $data ?? [], null);
        $this->setIfExists('values', $data ?? [], null);
        $this->setIfExists('field_types', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets chronology
     *
     * @return \MyDHL\Client\Model\Chronology|null
     */
    public function getChronology()
    {
        return $this->container['chronology'];
    }

    /**
     * Sets chronology
     *
     * @param \MyDHL\Client\Model\Chronology|null $chronology chronology
     *
     * @return self
     */
    public function setChronology($chronology)
    {
        if (is_null($chronology)) {
            throw new \InvalidArgumentException('non-nullable chronology cannot be null');
        }
        $this->container['chronology'] = $chronology;

        return $this;
    }

    /**
     * Gets hour_of_day
     *
     * @return int|null
     */
    public function getHourOfDay()
    {
        return $this->container['hour_of_day'];
    }

    /**
     * Sets hour_of_day
     *
     * @param int|null $hour_of_day hour_of_day
     *
     * @return self
     */
    public function setHourOfDay($hour_of_day)
    {
        if (is_null($hour_of_day)) {
            throw new \InvalidArgumentException('non-nullable hour_of_day cannot be null');
        }
        $this->container['hour_of_day'] = $hour_of_day;

        return $this;
    }

    /**
     * Gets minute_of_hour
     *
     * @return int|null
     */
    public function getMinuteOfHour()
    {
        return $this->container['minute_of_hour'];
    }

    /**
     * Sets minute_of_hour
     *
     * @param int|null $minute_of_hour minute_of_hour
     *
     * @return self
     */
    public function setMinuteOfHour($minute_of_hour)
    {
        if (is_null($minute_of_hour)) {
            throw new \InvalidArgumentException('non-nullable minute_of_hour cannot be null');
        }
        $this->container['minute_of_hour'] = $minute_of_hour;

        return $this;
    }

    /**
     * Gets second_of_minute
     *
     * @return int|null
     */
    public function getSecondOfMinute()
    {
        return $this->container['second_of_minute'];
    }

    /**
     * Sets second_of_minute
     *
     * @param int|null $second_of_minute second_of_minute
     *
     * @return self
     */
    public function setSecondOfMinute($second_of_minute)
    {
        if (is_null($second_of_minute)) {
            throw new \InvalidArgumentException('non-nullable second_of_minute cannot be null');
        }
        $this->container['second_of_minute'] = $second_of_minute;

        return $this;
    }

    /**
     * Gets millis_of_second
     *
     * @return int|null
     */
    public function getMillisOfSecond()
    {
        return $this->container['millis_of_second'];
    }

    /**
     * Sets millis_of_second
     *
     * @param int|null $millis_of_second millis_of_second
     *
     * @return self
     */
    public function setMillisOfSecond($millis_of_second)
    {
        if (is_null($millis_of_second)) {
            throw new \InvalidArgumentException('non-nullable millis_of_second cannot be null');
        }
        $this->container['millis_of_second'] = $millis_of_second;

        return $this;
    }

    /**
     * Gets millis_of_day
     *
     * @return int|null
     */
    public function getMillisOfDay()
    {
        return $this->container['millis_of_day'];
    }

    /**
     * Sets millis_of_day
     *
     * @param int|null $millis_of_day millis_of_day
     *
     * @return self
     */
    public function setMillisOfDay($millis_of_day)
    {
        if (is_null($millis_of_day)) {
            throw new \InvalidArgumentException('non-nullable millis_of_day cannot be null');
        }
        $this->container['millis_of_day'] = $millis_of_day;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \MyDHL\Client\Model\DateTimeField[]|null
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \MyDHL\Client\Model\DateTimeField[]|null $fields fields
     *
     * @return self
     */
    public function setFields($fields)
    {
        if (is_null($fields)) {
            throw new \InvalidArgumentException('non-nullable fields cannot be null');
        }
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets values
     *
     * @return int[]|null
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param int[]|null $values values
     *
     * @return self
     */
    public function setValues($values)
    {
        if (is_null($values)) {
            throw new \InvalidArgumentException('non-nullable values cannot be null');
        }
        $this->container['values'] = $values;

        return $this;
    }

    /**
     * Gets field_types
     *
     * @return \MyDHL\Client\Model\DateTimeFieldType[]|null
     */
    public function getFieldTypes()
    {
        return $this->container['field_types'];
    }

    /**
     * Sets field_types
     *
     * @param \MyDHL\Client\Model\DateTimeFieldType[]|null $field_types field_types
     *
     * @return self
     */
    public function setFieldTypes($field_types)
    {
        if (is_null($field_types)) {
            throw new \InvalidArgumentException('non-nullable field_types cannot be null');
        }
        $this->container['field_types'] = $field_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


