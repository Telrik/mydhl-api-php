<?php
/**
 * ServicePointsRestResponseV3
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.11.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Client\Model;

use \ArrayAccess;
use \MyDHL\Client\ObjectSerializer;

/**
 * ServicePointsRestResponseV3 Class Doc Comment
 *
 * @category Class
 * @package  MyDHL\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ServicePointsRestResponseV3 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ServicePointsRestResponseV3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => '\MyDHL\Client\Model\RestResponseStatus',
        'search_address' => 'string',
        'search_location' => '\MyDHL\Client\Model\GeoLocation',
        'map_culture' => 'string',
        'map_language' => 'string',
        'service_points' => '\MyDHL\Client\Model\ServicePoint[]',
        'messages' => 'string[]',
        'translations' => '\MyDHL\Client\Model\Translations',
        'lite_mode' => 'bool',
        'promotion' => '\MyDHL\Client\Model\Promotion'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'search_address' => null,
        'search_location' => null,
        'map_culture' => null,
        'map_language' => null,
        'service_points' => null,
        'messages' => null,
        'translations' => null,
        'lite_mode' => null,
        'promotion' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'status' => false,
        'search_address' => false,
        'search_location' => false,
        'map_culture' => false,
        'map_language' => false,
        'service_points' => false,
        'messages' => false,
        'translations' => false,
        'lite_mode' => false,
        'promotion' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'search_address' => 'searchAddress',
        'search_location' => 'searchLocation',
        'map_culture' => 'mapCulture',
        'map_language' => 'mapLanguage',
        'service_points' => 'servicePoints',
        'messages' => 'messages',
        'translations' => 'translations',
        'lite_mode' => 'liteMode',
        'promotion' => 'promotion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'search_address' => 'setSearchAddress',
        'search_location' => 'setSearchLocation',
        'map_culture' => 'setMapCulture',
        'map_language' => 'setMapLanguage',
        'service_points' => 'setServicePoints',
        'messages' => 'setMessages',
        'translations' => 'setTranslations',
        'lite_mode' => 'setLiteMode',
        'promotion' => 'setPromotion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'search_address' => 'getSearchAddress',
        'search_location' => 'getSearchLocation',
        'map_culture' => 'getMapCulture',
        'map_language' => 'getMapLanguage',
        'service_points' => 'getServicePoints',
        'messages' => 'getMessages',
        'translations' => 'getTranslations',
        'lite_mode' => 'getLiteMode',
        'promotion' => 'getPromotion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('search_address', $data ?? [], null);
        $this->setIfExists('search_location', $data ?? [], null);
        $this->setIfExists('map_culture', $data ?? [], null);
        $this->setIfExists('map_language', $data ?? [], null);
        $this->setIfExists('service_points', $data ?? [], null);
        $this->setIfExists('messages', $data ?? [], null);
        $this->setIfExists('translations', $data ?? [], null);
        $this->setIfExists('lite_mode', $data ?? [], null);
        $this->setIfExists('promotion', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return \MyDHL\Client\Model\RestResponseStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \MyDHL\Client\Model\RestResponseStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets search_address
     *
     * @return string|null
     */
    public function getSearchAddress()
    {
        return $this->container['search_address'];
    }

    /**
     * Sets search_address
     *
     * @param string|null $search_address The address used for the search (value of request parameter 'address')
     *
     * @return self
     */
    public function setSearchAddress($search_address)
    {
        if (is_null($search_address)) {
            throw new \InvalidArgumentException('non-nullable search_address cannot be null');
        }
        $this->container['search_address'] = $search_address;

        return $this;
    }

    /**
     * Gets search_location
     *
     * @return \MyDHL\Client\Model\GeoLocation|null
     */
    public function getSearchLocation()
    {
        return $this->container['search_location'];
    }

    /**
     * Sets search_location
     *
     * @param \MyDHL\Client\Model\GeoLocation|null $search_location search_location
     *
     * @return self
     */
    public function setSearchLocation($search_location)
    {
        if (is_null($search_location)) {
            throw new \InvalidArgumentException('non-nullable search_location cannot be null');
        }
        $this->container['search_location'] = $search_location;

        return $this;
    }

    /**
     * Gets map_culture
     *
     * @return string|null
     */
    public function getMapCulture()
    {
        return $this->container['map_culture'];
    }

    /**
     * Sets map_culture
     *
     * @param string|null $map_culture The culture parameter for Bing Maps API (derived from the country parameter in the request)
     *
     * @return self
     */
    public function setMapCulture($map_culture)
    {
        if (is_null($map_culture)) {
            throw new \InvalidArgumentException('non-nullable map_culture cannot be null');
        }
        $this->container['map_culture'] = $map_culture;

        return $this;
    }

    /**
     * Gets map_language
     *
     * @return string|null
     */
    public function getMapLanguage()
    {
        return $this->container['map_language'];
    }

    /**
     * Sets map_language
     *
     * @param string|null $map_language Map Culture Used for Third party Maps
     *
     * @return self
     */
    public function setMapLanguage($map_language)
    {
        if (is_null($map_language)) {
            throw new \InvalidArgumentException('non-nullable map_language cannot be null');
        }
        $this->container['map_language'] = $map_language;

        return $this;
    }

    /**
     * Gets service_points
     *
     * @return \MyDHL\Client\Model\ServicePoint[]|null
     */
    public function getServicePoints()
    {
        return $this->container['service_points'];
    }

    /**
     * Sets service_points
     *
     * @param \MyDHL\Client\Model\ServicePoint[]|null $service_points Array of the found Service Points. Each Service Point entity contains details about the service point.
     *
     * @return self
     */
    public function setServicePoints($service_points)
    {
        if (is_null($service_points)) {
            throw new \InvalidArgumentException('non-nullable service_points cannot be null');
        }
        $this->container['service_points'] = $service_points;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return string[]|null
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param string[]|null $messages Array of strings. Contains information messages  - e.g. required language is not available, result was filtered due to incoming holidays.
     *
     * @return self
     */
    public function setMessages($messages)
    {
        if (is_null($messages)) {
            throw new \InvalidArgumentException('non-nullable messages cannot be null');
        }
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets translations
     *
     * @return \MyDHL\Client\Model\Translations|null
     */
    public function getTranslations()
    {
        return $this->container['translations'];
    }

    /**
     * Sets translations
     *
     * @param \MyDHL\Client\Model\Translations|null $translations translations
     *
     * @return self
     */
    public function setTranslations($translations)
    {
        if (is_null($translations)) {
            throw new \InvalidArgumentException('non-nullable translations cannot be null');
        }
        $this->container['translations'] = $translations;

        return $this;
    }

    /**
     * Gets lite_mode
     *
     * @return bool|null
     */
    public function getLiteMode()
    {
        return $this->container['lite_mode'];
    }

    /**
     * Sets lite_mode
     *
     * @param bool|null $lite_mode Indicates whether lite mode is acitvated or not.
     *
     * @return self
     */
    public function setLiteMode($lite_mode)
    {
        if (is_null($lite_mode)) {
            throw new \InvalidArgumentException('non-nullable lite_mode cannot be null');
        }
        $this->container['lite_mode'] = $lite_mode;

        return $this;
    }

    /**
     * Gets promotion
     *
     * @return \MyDHL\Client\Model\Promotion|null
     */
    public function getPromotion()
    {
        return $this->container['promotion'];
    }

    /**
     * Sets promotion
     *
     * @param \MyDHL\Client\Model\Promotion|null $promotion promotion
     *
     * @return self
     */
    public function setPromotion($promotion)
    {
        if (is_null($promotion)) {
            throw new \InvalidArgumentException('non-nullable promotion cannot be null');
        }
        $this->container['promotion'] = $promotion;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


