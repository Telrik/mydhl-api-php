<?php
/**
 * ServicepointApi
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDHL\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DHL Express APIs (MyDHL API)
 *
 * Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)
 *
 * The version of the OpenAPI document: 2.11.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDHL\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MyDHL\Client\ApiException;
use MyDHL\Client\Configuration;
use MyDHL\Client\HeaderSelector;
use MyDHL\Client\ObjectSerializer;

/**
 * ServicepointApi Class Doc Comment
 *
 * @category Class
 * @package  MyDHL\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ServicepointApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'expApiServicepoints' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation expApiServicepoints
     *
     * Returns list of service points based on the given postal location address, service point ID or geocode details for DHL Express Service points to pick-up and drop-off shipments
     *
     * @param  string $address The address near which Service Points are to be found. If servicePointID is used, address is not needed.     Address can be sent as raw address. However to be GDPR compliant, tokenized address in  request should be sent. (optional)
     * @param  string $place_id To specify the placeID for which the nearest service points have to be searched. PlaceId refers to the ID provided by any provider for particular Address. Ex: Google (optional)
     * @param  string $provider_id To specify the providerId(provider) for the place ID (optional)
     * @param  string $latitude Latitude of user location. If address / servicePointID  parameter used, this parameter is not needed. (optional)
     * @param  string $longitude Longitude of user location. If address / servicePointID  parameter used, this parameter is not needed. It works in combination with the latitude parameter (optional)
     * @param  string $service_point_id Service Point ID is a unique key with 6 characters, consisting of Service Area for first 3 characters (e.g. BRU) and the last 3 characters is the Facility code (e.g. 001); Service point ID &#x3D; BRU001.     If address is used, id is not possible to use. (optional)
     * @param  string $country_code Only ISO 3166-1 - Alpha-2 for country code can be used, e.g. “NL”, “ES”, “GB”, “US”, “DE”, .... This country code is used for returning matching service points in that country.          When rendering the service point information, the time format (24h or AM/PM), and distance unit (km/miles) are derived from the country information stored in the GSPL database for the country specified via this parameter.     E.g. for countryCode&#x3D;GB will be time format AM/PM and distance unit will be mi.     E.g. for countryCode&#x3D;DE will be time format 24h and distance unit will be km.           The CountryCode is also used in the address search by Google/Bing to limit the results to the specified country (f.e. to avoid picking a street with the same name from a different country) (optional)
     * @param  string $language Language Code - represents the language. Mandatory if Script Code is provided or Language Country Code is provided, else optional. E.g. ‘eng’     Language Code is using ISO 3166-1 alpha-3 (3 letters) (optional)
     * @param  string $language_script_code Language Script Code - represents the writing system. Mandatory if Language Country Code is provided, else optional. (optional)
     * @param  string $language_country_code Language Country Code - can be used to differentiate between linguistic variants of the same Language. (optional)
     * @param  string $service_point_results Max. number of service points to be returned.      If id or idf is used, this parameter is not needed as this will return searched service point. (optional)
     * @param  string $capability Comma separated list of physical process capability codes.     81: I have a DHL account or return shipment     82: I have paid online     88: I will pay at the DHL Service Point     73: I will create a DHL shipping label at the DHL Service Point     74: I have printed a DHL label    75,76: I have a QR code    78,79: Im collecting a DHL Express parcel    86,87: I have directed a DHL Express parcel to a DHL Service Point    Possible Combinations : 81,73 | 81,74 | 81,75,76  | 82,74 | 82,75,76 | 88,73 | 78,79 | 86,87    Note: | is just used to represent the seperation of combinations. (optional)
     * @param  string $open_before Service points open Before given Time. E.g.: 14:00 will find service points which are open before 14:00 (optional)
     * @param  string $open_after Service points open After given time e.g.:15:00 will find service points which are open after 15:00 (optional)
     * @param  string[] $open_day Open on Weekday, valid values as follow:     1 - Monday     2 - Tuesday     3 - Wednesday     4 - Thursday     5 - Friday     6 - Saturday     0 – Sunday (optional)
     * @param  string $weight Max. weight of the shipment. Decimals are allowed as well (decimal separator either “,” or “.”) (optional)
     * @param  string[] $weight_uom Weight units – kg or lb. Required if weight is passed in. (optional)
     * @param  string $length Max. length of the shipment  - the highest dimension     e.g. 30. Decimals are allowed as well (decimal separator either “,” or “.”) (optional)
     * @param  string $width Max. width of the shipment  - the middle dimension     e.g. 20. Decimals are allowed as well (decimal separator either “,” or “.”) (optional)
     * @param  string $height Max. height of the shipment  - the lowest dimension     e.g. 10. Decimals are allowed as well (decimal separator either “,” or “.”) (optional)
     * @param  string[] $dimensions_uom Dimension units – cm or in. Required with any of length, width or height parameter. (optional)
     * @param  string[] $result_uom Distance uom to be used when returning response, it can be either km or mi. If not provided, default uom set for the country is returned. (optional)
     * @param  string $service_area_code Service Area Code of the search address (optional)
     * @param  string[] $service_point_types Comma separated list of service point types, e.g. “CTY,STN,247”.     Allowed Values:     CTY (City) - High street premises. DHL owned and managed. Eg. Downtown    STN (Station) - DHL premises. DHL owned and managed at PUD locations    PRT (Partner) - Partners(External) store. Eg. 7-Eleven, Shell    247 (24/7) - operating 24hours a day, has locker facility.  DHL owned and unmanned or / and automated (optional)
     * @param  string $max_distance Maximum distance in kilometers between the geocoded address and the returned Service Points. Values equal or less than 0 are ignored.     Accuracy of the maxDistance parameter:     The GREF web service uses a search rectangle for  Service Point searches. Therefore the maxDistance value is used to create a square with side length l &#x3D; maxDistance * 2. This means that the distance of some of the found Service Points may actually be longer as specified by the maxDistance parameter, if the Service Point is located outside the circle with radius r &#x3D; maxDistance, but still within the search square:     Centre point of the search square is the latitude/longitude pair resulting from a geocoding request to the Bing geocoding API, which in some cases may not represent the actual location of the address. The more precisely the address is specified, the higher is the probability that the geocoded location matches with the search address. (optional)
     * @param  string $piece_count_limit Static number, max pieces which can be handled on the service point. (optional)
     * @param  string[] $import_charges Y/N – indicator whether it is possible to pay import charges on service point. (optional)
     * @param  string $key Unique API key which required separate onboarding request to enable this service.  Please approach your country representative for onboarding. Once approval is granted, API key will be generated and used for authentication. (optional)
     * @param  string $combine_parameters Allows combination of values for parameters servicePointTypes and importChanges. Limitations:- Only 1 level of conditions is allowed (not multiple AND/OR)Applicable only on servicePointTypes and importCharges parameters “,” stands for OR condition “&amp;” stands for AND condition “()” splits multiple conditions. (optional)
     * @param  string $edd Estimated Delivery date:     YYYY-MM-DDThh:mm:ssTZD (for example 2023-06-25T22:59:00Z). This is a Servicepoint Capacity Management System Parameter to receive a capacity data of the found service points additionally calling Servicepoint Capacity Management System service. (optional)
     * @param  string[] $exclude_fully_booked Parameter which will enable to filter out fully booked services in the Service Point Locator response to client.     Values:     Y - Service Point Locator will not send back service points which are fully booked.     N - Service Point Locator will send back all service points, also those where is no free capacity.     If not provided in request, it will be set up as N by default.      This is a Servicepoint Capacity Management System parameter. (optional)
     * @param  string $shipment_id To specify the shipment ID. This is used for Servicepoint Capacity Management System parameter. (optional)
     * @param  string $piece_id Piece ID without Data Identifier / Prefix. (for example JD0081105201831337270 instead of JJD0081105201831337270). This is a Servicepoint Capacity Management System parameter. (optional)
     * @param  string $shipment_origin_service_area_code To specify the Shipment Origin Service Area Code. This is a Servicepoint Capacity Management System parameter. (optional)
     * @param  string[] $is_results_specific_capab_required This is to include preconfigured non UI capability codes(ex. PPC 72) to be considered while sending the request to Reference Data backend service. PPC 72 is applicable only for REST request and not for Service Point Locator UI. (optional)
     * @param  string[] $encrypt This &#39;encrypt&#39; flag is to indicate to Service Point Locator whether the address is tokenized(encrypt&#x3D;y) or non-tokenized. So that Service Point Locator can detokenize to provide matching Service Point list.          When &#39;encrypt&#x3D;y&#39;, Service Point Locator clients should mandatorily send tokenized address in the REST request.      When &#39;encrypt&#x3D;n&#39; or without &#39;encrypt&#39; parameter, client should only send non-tokenized address(raw address).     Sample below:            Non-tokenized(raw) address: Sabah, Malaysia           Tokenized address: YmtzOVpTQWdQSGRjSm41bFlDRkZjR0ZKSWc9PQ&#x3D;&#x3D;          Address Tokenization: Service Point Locator provides additional security to mask the address sent by the client in REST request which will hide raw address visible on the ‘View page Source’ or in ‘Developer tools. (optional)
     * @param  string[] $b64 This indicates whether the address parameter contains the base64 encoded value or not. (optional)
     * @param  string[] $svp_status ServicePoint Status(svpStatus) to be used especially when looking for inactive service points with the svpStatus S,U,X,Y. By default active svpStatus &#39;A&#39; is considered when this parameter is not sent in the request.   A &#x3D; Service Available (Open)  S &#x3D; Service Suspended (Temporarily closed)   U &#x3D; Service Unavailable (Temporarily closed)   Y &#x3D; Not Yet Open (Temporarily closed)   X &#x3D; Closed (Temporarily closed) (optional)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiServicepoints'] to see the possible values for this operation
     *
     * @throws \MyDHL\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MyDHL\Client\Model\ServicePointsRestResponseV3|\MyDHL\Client\Model\ExceptionResponse
     */
    public function expApiServicepoints($address = null, $place_id = null, $provider_id = null, $latitude = null, $longitude = null, $service_point_id = null, $country_code = null, $language = null, $language_script_code = null, $language_country_code = null, $service_point_results = null, $capability = null, $open_before = null, $open_after = null, $open_day = null, $weight = null, $weight_uom = null, $length = null, $width = null, $height = null, $dimensions_uom = null, $result_uom = null, $service_area_code = null, $service_point_types = null, $max_distance = null, $piece_count_limit = null, $import_charges = null, $key = null, $combine_parameters = null, $edd = null, $exclude_fully_booked = null, $shipment_id = null, $piece_id = null, $shipment_origin_service_area_code = null, $is_results_specific_capab_required = null, $encrypt = null, $b64 = null, $svp_status = null, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, string $contentType = self::contentTypes['expApiServicepoints'][0])
    {
        list($response) = $this->expApiServicepointsWithHttpInfo($address, $place_id, $provider_id, $latitude, $longitude, $service_point_id, $country_code, $language, $language_script_code, $language_country_code, $service_point_results, $capability, $open_before, $open_after, $open_day, $weight, $weight_uom, $length, $width, $height, $dimensions_uom, $result_uom, $service_area_code, $service_point_types, $max_distance, $piece_count_limit, $import_charges, $key, $combine_parameters, $edd, $exclude_fully_booked, $shipment_id, $piece_id, $shipment_origin_service_area_code, $is_results_specific_capab_required, $encrypt, $b64, $svp_status, $message_reference, $message_reference_date, $plugin_name, $plugin_version, $shipping_system_platform_name, $shipping_system_platform_version, $webstore_platform_name, $webstore_platform_version, $contentType);
        return $response;
    }

    /**
     * Operation expApiServicepointsWithHttpInfo
     *
     * Returns list of service points based on the given postal location address, service point ID or geocode details for DHL Express Service points to pick-up and drop-off shipments
     *
     * @param  string $address The address near which Service Points are to be found. If servicePointID is used, address is not needed.     Address can be sent as raw address. However to be GDPR compliant, tokenized address in  request should be sent. (optional)
     * @param  string $place_id To specify the placeID for which the nearest service points have to be searched. PlaceId refers to the ID provided by any provider for particular Address. Ex: Google (optional)
     * @param  string $provider_id To specify the providerId(provider) for the place ID (optional)
     * @param  string $latitude Latitude of user location. If address / servicePointID  parameter used, this parameter is not needed. (optional)
     * @param  string $longitude Longitude of user location. If address / servicePointID  parameter used, this parameter is not needed. It works in combination with the latitude parameter (optional)
     * @param  string $service_point_id Service Point ID is a unique key with 6 characters, consisting of Service Area for first 3 characters (e.g. BRU) and the last 3 characters is the Facility code (e.g. 001); Service point ID &#x3D; BRU001.     If address is used, id is not possible to use. (optional)
     * @param  string $country_code Only ISO 3166-1 - Alpha-2 for country code can be used, e.g. “NL”, “ES”, “GB”, “US”, “DE”, .... This country code is used for returning matching service points in that country.          When rendering the service point information, the time format (24h or AM/PM), and distance unit (km/miles) are derived from the country information stored in the GSPL database for the country specified via this parameter.     E.g. for countryCode&#x3D;GB will be time format AM/PM and distance unit will be mi.     E.g. for countryCode&#x3D;DE will be time format 24h and distance unit will be km.           The CountryCode is also used in the address search by Google/Bing to limit the results to the specified country (f.e. to avoid picking a street with the same name from a different country) (optional)
     * @param  string $language Language Code - represents the language. Mandatory if Script Code is provided or Language Country Code is provided, else optional. E.g. ‘eng’     Language Code is using ISO 3166-1 alpha-3 (3 letters) (optional)
     * @param  string $language_script_code Language Script Code - represents the writing system. Mandatory if Language Country Code is provided, else optional. (optional)
     * @param  string $language_country_code Language Country Code - can be used to differentiate between linguistic variants of the same Language. (optional)
     * @param  string $service_point_results Max. number of service points to be returned.      If id or idf is used, this parameter is not needed as this will return searched service point. (optional)
     * @param  string $capability Comma separated list of physical process capability codes.     81: I have a DHL account or return shipment     82: I have paid online     88: I will pay at the DHL Service Point     73: I will create a DHL shipping label at the DHL Service Point     74: I have printed a DHL label    75,76: I have a QR code    78,79: Im collecting a DHL Express parcel    86,87: I have directed a DHL Express parcel to a DHL Service Point    Possible Combinations : 81,73 | 81,74 | 81,75,76  | 82,74 | 82,75,76 | 88,73 | 78,79 | 86,87    Note: | is just used to represent the seperation of combinations. (optional)
     * @param  string $open_before Service points open Before given Time. E.g.: 14:00 will find service points which are open before 14:00 (optional)
     * @param  string $open_after Service points open After given time e.g.:15:00 will find service points which are open after 15:00 (optional)
     * @param  string[] $open_day Open on Weekday, valid values as follow:     1 - Monday     2 - Tuesday     3 - Wednesday     4 - Thursday     5 - Friday     6 - Saturday     0 – Sunday (optional)
     * @param  string $weight Max. weight of the shipment. Decimals are allowed as well (decimal separator either “,” or “.”) (optional)
     * @param  string[] $weight_uom Weight units – kg or lb. Required if weight is passed in. (optional)
     * @param  string $length Max. length of the shipment  - the highest dimension     e.g. 30. Decimals are allowed as well (decimal separator either “,” or “.”) (optional)
     * @param  string $width Max. width of the shipment  - the middle dimension     e.g. 20. Decimals are allowed as well (decimal separator either “,” or “.”) (optional)
     * @param  string $height Max. height of the shipment  - the lowest dimension     e.g. 10. Decimals are allowed as well (decimal separator either “,” or “.”) (optional)
     * @param  string[] $dimensions_uom Dimension units – cm or in. Required with any of length, width or height parameter. (optional)
     * @param  string[] $result_uom Distance uom to be used when returning response, it can be either km or mi. If not provided, default uom set for the country is returned. (optional)
     * @param  string $service_area_code Service Area Code of the search address (optional)
     * @param  string[] $service_point_types Comma separated list of service point types, e.g. “CTY,STN,247”.     Allowed Values:     CTY (City) - High street premises. DHL owned and managed. Eg. Downtown    STN (Station) - DHL premises. DHL owned and managed at PUD locations    PRT (Partner) - Partners(External) store. Eg. 7-Eleven, Shell    247 (24/7) - operating 24hours a day, has locker facility.  DHL owned and unmanned or / and automated (optional)
     * @param  string $max_distance Maximum distance in kilometers between the geocoded address and the returned Service Points. Values equal or less than 0 are ignored.     Accuracy of the maxDistance parameter:     The GREF web service uses a search rectangle for  Service Point searches. Therefore the maxDistance value is used to create a square with side length l &#x3D; maxDistance * 2. This means that the distance of some of the found Service Points may actually be longer as specified by the maxDistance parameter, if the Service Point is located outside the circle with radius r &#x3D; maxDistance, but still within the search square:     Centre point of the search square is the latitude/longitude pair resulting from a geocoding request to the Bing geocoding API, which in some cases may not represent the actual location of the address. The more precisely the address is specified, the higher is the probability that the geocoded location matches with the search address. (optional)
     * @param  string $piece_count_limit Static number, max pieces which can be handled on the service point. (optional)
     * @param  string[] $import_charges Y/N – indicator whether it is possible to pay import charges on service point. (optional)
     * @param  string $key Unique API key which required separate onboarding request to enable this service.  Please approach your country representative for onboarding. Once approval is granted, API key will be generated and used for authentication. (optional)
     * @param  string $combine_parameters Allows combination of values for parameters servicePointTypes and importChanges. Limitations:- Only 1 level of conditions is allowed (not multiple AND/OR)Applicable only on servicePointTypes and importCharges parameters “,” stands for OR condition “&amp;” stands for AND condition “()” splits multiple conditions. (optional)
     * @param  string $edd Estimated Delivery date:     YYYY-MM-DDThh:mm:ssTZD (for example 2023-06-25T22:59:00Z). This is a Servicepoint Capacity Management System Parameter to receive a capacity data of the found service points additionally calling Servicepoint Capacity Management System service. (optional)
     * @param  string[] $exclude_fully_booked Parameter which will enable to filter out fully booked services in the Service Point Locator response to client.     Values:     Y - Service Point Locator will not send back service points which are fully booked.     N - Service Point Locator will send back all service points, also those where is no free capacity.     If not provided in request, it will be set up as N by default.      This is a Servicepoint Capacity Management System parameter. (optional)
     * @param  string $shipment_id To specify the shipment ID. This is used for Servicepoint Capacity Management System parameter. (optional)
     * @param  string $piece_id Piece ID without Data Identifier / Prefix. (for example JD0081105201831337270 instead of JJD0081105201831337270). This is a Servicepoint Capacity Management System parameter. (optional)
     * @param  string $shipment_origin_service_area_code To specify the Shipment Origin Service Area Code. This is a Servicepoint Capacity Management System parameter. (optional)
     * @param  string[] $is_results_specific_capab_required This is to include preconfigured non UI capability codes(ex. PPC 72) to be considered while sending the request to Reference Data backend service. PPC 72 is applicable only for REST request and not for Service Point Locator UI. (optional)
     * @param  string[] $encrypt This &#39;encrypt&#39; flag is to indicate to Service Point Locator whether the address is tokenized(encrypt&#x3D;y) or non-tokenized. So that Service Point Locator can detokenize to provide matching Service Point list.          When &#39;encrypt&#x3D;y&#39;, Service Point Locator clients should mandatorily send tokenized address in the REST request.      When &#39;encrypt&#x3D;n&#39; or without &#39;encrypt&#39; parameter, client should only send non-tokenized address(raw address).     Sample below:            Non-tokenized(raw) address: Sabah, Malaysia           Tokenized address: YmtzOVpTQWdQSGRjSm41bFlDRkZjR0ZKSWc9PQ&#x3D;&#x3D;          Address Tokenization: Service Point Locator provides additional security to mask the address sent by the client in REST request which will hide raw address visible on the ‘View page Source’ or in ‘Developer tools. (optional)
     * @param  string[] $b64 This indicates whether the address parameter contains the base64 encoded value or not. (optional)
     * @param  string[] $svp_status ServicePoint Status(svpStatus) to be used especially when looking for inactive service points with the svpStatus S,U,X,Y. By default active svpStatus &#39;A&#39; is considered when this parameter is not sent in the request.   A &#x3D; Service Available (Open)  S &#x3D; Service Suspended (Temporarily closed)   U &#x3D; Service Unavailable (Temporarily closed)   Y &#x3D; Not Yet Open (Temporarily closed)   X &#x3D; Closed (Temporarily closed) (optional)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiServicepoints'] to see the possible values for this operation
     *
     * @throws \MyDHL\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MyDHL\Client\Model\ServicePointsRestResponseV3|\MyDHL\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function expApiServicepointsWithHttpInfo($address = null, $place_id = null, $provider_id = null, $latitude = null, $longitude = null, $service_point_id = null, $country_code = null, $language = null, $language_script_code = null, $language_country_code = null, $service_point_results = null, $capability = null, $open_before = null, $open_after = null, $open_day = null, $weight = null, $weight_uom = null, $length = null, $width = null, $height = null, $dimensions_uom = null, $result_uom = null, $service_area_code = null, $service_point_types = null, $max_distance = null, $piece_count_limit = null, $import_charges = null, $key = null, $combine_parameters = null, $edd = null, $exclude_fully_booked = null, $shipment_id = null, $piece_id = null, $shipment_origin_service_area_code = null, $is_results_specific_capab_required = null, $encrypt = null, $b64 = null, $svp_status = null, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, string $contentType = self::contentTypes['expApiServicepoints'][0])
    {
        $request = $this->expApiServicepointsRequest($address, $place_id, $provider_id, $latitude, $longitude, $service_point_id, $country_code, $language, $language_script_code, $language_country_code, $service_point_results, $capability, $open_before, $open_after, $open_day, $weight, $weight_uom, $length, $width, $height, $dimensions_uom, $result_uom, $service_area_code, $service_point_types, $max_distance, $piece_count_limit, $import_charges, $key, $combine_parameters, $edd, $exclude_fully_booked, $shipment_id, $piece_id, $shipment_origin_service_area_code, $is_results_specific_capab_required, $encrypt, $b64, $svp_status, $message_reference, $message_reference_date, $plugin_name, $plugin_version, $shipping_system_platform_name, $shipping_system_platform_version, $webstore_platform_name, $webstore_platform_version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MyDHL\Client\Model\ServicePointsRestResponseV3' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MyDHL\Client\Model\ServicePointsRestResponseV3' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MyDHL\Client\Model\ServicePointsRestResponseV3', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\MyDHL\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MyDHL\Client\Model\ExceptionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MyDHL\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MyDHL\Client\Model\ServicePointsRestResponseV3';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyDHL\Client\Model\ServicePointsRestResponseV3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyDHL\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation expApiServicepointsAsync
     *
     * Returns list of service points based on the given postal location address, service point ID or geocode details for DHL Express Service points to pick-up and drop-off shipments
     *
     * @param  string $address The address near which Service Points are to be found. If servicePointID is used, address is not needed.     Address can be sent as raw address. However to be GDPR compliant, tokenized address in  request should be sent. (optional)
     * @param  string $place_id To specify the placeID for which the nearest service points have to be searched. PlaceId refers to the ID provided by any provider for particular Address. Ex: Google (optional)
     * @param  string $provider_id To specify the providerId(provider) for the place ID (optional)
     * @param  string $latitude Latitude of user location. If address / servicePointID  parameter used, this parameter is not needed. (optional)
     * @param  string $longitude Longitude of user location. If address / servicePointID  parameter used, this parameter is not needed. It works in combination with the latitude parameter (optional)
     * @param  string $service_point_id Service Point ID is a unique key with 6 characters, consisting of Service Area for first 3 characters (e.g. BRU) and the last 3 characters is the Facility code (e.g. 001); Service point ID &#x3D; BRU001.     If address is used, id is not possible to use. (optional)
     * @param  string $country_code Only ISO 3166-1 - Alpha-2 for country code can be used, e.g. “NL”, “ES”, “GB”, “US”, “DE”, .... This country code is used for returning matching service points in that country.          When rendering the service point information, the time format (24h or AM/PM), and distance unit (km/miles) are derived from the country information stored in the GSPL database for the country specified via this parameter.     E.g. for countryCode&#x3D;GB will be time format AM/PM and distance unit will be mi.     E.g. for countryCode&#x3D;DE will be time format 24h and distance unit will be km.           The CountryCode is also used in the address search by Google/Bing to limit the results to the specified country (f.e. to avoid picking a street with the same name from a different country) (optional)
     * @param  string $language Language Code - represents the language. Mandatory if Script Code is provided or Language Country Code is provided, else optional. E.g. ‘eng’     Language Code is using ISO 3166-1 alpha-3 (3 letters) (optional)
     * @param  string $language_script_code Language Script Code - represents the writing system. Mandatory if Language Country Code is provided, else optional. (optional)
     * @param  string $language_country_code Language Country Code - can be used to differentiate between linguistic variants of the same Language. (optional)
     * @param  string $service_point_results Max. number of service points to be returned.      If id or idf is used, this parameter is not needed as this will return searched service point. (optional)
     * @param  string $capability Comma separated list of physical process capability codes.     81: I have a DHL account or return shipment     82: I have paid online     88: I will pay at the DHL Service Point     73: I will create a DHL shipping label at the DHL Service Point     74: I have printed a DHL label    75,76: I have a QR code    78,79: Im collecting a DHL Express parcel    86,87: I have directed a DHL Express parcel to a DHL Service Point    Possible Combinations : 81,73 | 81,74 | 81,75,76  | 82,74 | 82,75,76 | 88,73 | 78,79 | 86,87    Note: | is just used to represent the seperation of combinations. (optional)
     * @param  string $open_before Service points open Before given Time. E.g.: 14:00 will find service points which are open before 14:00 (optional)
     * @param  string $open_after Service points open After given time e.g.:15:00 will find service points which are open after 15:00 (optional)
     * @param  string[] $open_day Open on Weekday, valid values as follow:     1 - Monday     2 - Tuesday     3 - Wednesday     4 - Thursday     5 - Friday     6 - Saturday     0 – Sunday (optional)
     * @param  string $weight Max. weight of the shipment. Decimals are allowed as well (decimal separator either “,” or “.”) (optional)
     * @param  string[] $weight_uom Weight units – kg or lb. Required if weight is passed in. (optional)
     * @param  string $length Max. length of the shipment  - the highest dimension     e.g. 30. Decimals are allowed as well (decimal separator either “,” or “.”) (optional)
     * @param  string $width Max. width of the shipment  - the middle dimension     e.g. 20. Decimals are allowed as well (decimal separator either “,” or “.”) (optional)
     * @param  string $height Max. height of the shipment  - the lowest dimension     e.g. 10. Decimals are allowed as well (decimal separator either “,” or “.”) (optional)
     * @param  string[] $dimensions_uom Dimension units – cm or in. Required with any of length, width or height parameter. (optional)
     * @param  string[] $result_uom Distance uom to be used when returning response, it can be either km or mi. If not provided, default uom set for the country is returned. (optional)
     * @param  string $service_area_code Service Area Code of the search address (optional)
     * @param  string[] $service_point_types Comma separated list of service point types, e.g. “CTY,STN,247”.     Allowed Values:     CTY (City) - High street premises. DHL owned and managed. Eg. Downtown    STN (Station) - DHL premises. DHL owned and managed at PUD locations    PRT (Partner) - Partners(External) store. Eg. 7-Eleven, Shell    247 (24/7) - operating 24hours a day, has locker facility.  DHL owned and unmanned or / and automated (optional)
     * @param  string $max_distance Maximum distance in kilometers between the geocoded address and the returned Service Points. Values equal or less than 0 are ignored.     Accuracy of the maxDistance parameter:     The GREF web service uses a search rectangle for  Service Point searches. Therefore the maxDistance value is used to create a square with side length l &#x3D; maxDistance * 2. This means that the distance of some of the found Service Points may actually be longer as specified by the maxDistance parameter, if the Service Point is located outside the circle with radius r &#x3D; maxDistance, but still within the search square:     Centre point of the search square is the latitude/longitude pair resulting from a geocoding request to the Bing geocoding API, which in some cases may not represent the actual location of the address. The more precisely the address is specified, the higher is the probability that the geocoded location matches with the search address. (optional)
     * @param  string $piece_count_limit Static number, max pieces which can be handled on the service point. (optional)
     * @param  string[] $import_charges Y/N – indicator whether it is possible to pay import charges on service point. (optional)
     * @param  string $key Unique API key which required separate onboarding request to enable this service.  Please approach your country representative for onboarding. Once approval is granted, API key will be generated and used for authentication. (optional)
     * @param  string $combine_parameters Allows combination of values for parameters servicePointTypes and importChanges. Limitations:- Only 1 level of conditions is allowed (not multiple AND/OR)Applicable only on servicePointTypes and importCharges parameters “,” stands for OR condition “&amp;” stands for AND condition “()” splits multiple conditions. (optional)
     * @param  string $edd Estimated Delivery date:     YYYY-MM-DDThh:mm:ssTZD (for example 2023-06-25T22:59:00Z). This is a Servicepoint Capacity Management System Parameter to receive a capacity data of the found service points additionally calling Servicepoint Capacity Management System service. (optional)
     * @param  string[] $exclude_fully_booked Parameter which will enable to filter out fully booked services in the Service Point Locator response to client.     Values:     Y - Service Point Locator will not send back service points which are fully booked.     N - Service Point Locator will send back all service points, also those where is no free capacity.     If not provided in request, it will be set up as N by default.      This is a Servicepoint Capacity Management System parameter. (optional)
     * @param  string $shipment_id To specify the shipment ID. This is used for Servicepoint Capacity Management System parameter. (optional)
     * @param  string $piece_id Piece ID without Data Identifier / Prefix. (for example JD0081105201831337270 instead of JJD0081105201831337270). This is a Servicepoint Capacity Management System parameter. (optional)
     * @param  string $shipment_origin_service_area_code To specify the Shipment Origin Service Area Code. This is a Servicepoint Capacity Management System parameter. (optional)
     * @param  string[] $is_results_specific_capab_required This is to include preconfigured non UI capability codes(ex. PPC 72) to be considered while sending the request to Reference Data backend service. PPC 72 is applicable only for REST request and not for Service Point Locator UI. (optional)
     * @param  string[] $encrypt This &#39;encrypt&#39; flag is to indicate to Service Point Locator whether the address is tokenized(encrypt&#x3D;y) or non-tokenized. So that Service Point Locator can detokenize to provide matching Service Point list.          When &#39;encrypt&#x3D;y&#39;, Service Point Locator clients should mandatorily send tokenized address in the REST request.      When &#39;encrypt&#x3D;n&#39; or without &#39;encrypt&#39; parameter, client should only send non-tokenized address(raw address).     Sample below:            Non-tokenized(raw) address: Sabah, Malaysia           Tokenized address: YmtzOVpTQWdQSGRjSm41bFlDRkZjR0ZKSWc9PQ&#x3D;&#x3D;          Address Tokenization: Service Point Locator provides additional security to mask the address sent by the client in REST request which will hide raw address visible on the ‘View page Source’ or in ‘Developer tools. (optional)
     * @param  string[] $b64 This indicates whether the address parameter contains the base64 encoded value or not. (optional)
     * @param  string[] $svp_status ServicePoint Status(svpStatus) to be used especially when looking for inactive service points with the svpStatus S,U,X,Y. By default active svpStatus &#39;A&#39; is considered when this parameter is not sent in the request.   A &#x3D; Service Available (Open)  S &#x3D; Service Suspended (Temporarily closed)   U &#x3D; Service Unavailable (Temporarily closed)   Y &#x3D; Not Yet Open (Temporarily closed)   X &#x3D; Closed (Temporarily closed) (optional)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiServicepoints'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function expApiServicepointsAsync($address = null, $place_id = null, $provider_id = null, $latitude = null, $longitude = null, $service_point_id = null, $country_code = null, $language = null, $language_script_code = null, $language_country_code = null, $service_point_results = null, $capability = null, $open_before = null, $open_after = null, $open_day = null, $weight = null, $weight_uom = null, $length = null, $width = null, $height = null, $dimensions_uom = null, $result_uom = null, $service_area_code = null, $service_point_types = null, $max_distance = null, $piece_count_limit = null, $import_charges = null, $key = null, $combine_parameters = null, $edd = null, $exclude_fully_booked = null, $shipment_id = null, $piece_id = null, $shipment_origin_service_area_code = null, $is_results_specific_capab_required = null, $encrypt = null, $b64 = null, $svp_status = null, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, string $contentType = self::contentTypes['expApiServicepoints'][0])
    {
        return $this->expApiServicepointsAsyncWithHttpInfo($address, $place_id, $provider_id, $latitude, $longitude, $service_point_id, $country_code, $language, $language_script_code, $language_country_code, $service_point_results, $capability, $open_before, $open_after, $open_day, $weight, $weight_uom, $length, $width, $height, $dimensions_uom, $result_uom, $service_area_code, $service_point_types, $max_distance, $piece_count_limit, $import_charges, $key, $combine_parameters, $edd, $exclude_fully_booked, $shipment_id, $piece_id, $shipment_origin_service_area_code, $is_results_specific_capab_required, $encrypt, $b64, $svp_status, $message_reference, $message_reference_date, $plugin_name, $plugin_version, $shipping_system_platform_name, $shipping_system_platform_version, $webstore_platform_name, $webstore_platform_version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation expApiServicepointsAsyncWithHttpInfo
     *
     * Returns list of service points based on the given postal location address, service point ID or geocode details for DHL Express Service points to pick-up and drop-off shipments
     *
     * @param  string $address The address near which Service Points are to be found. If servicePointID is used, address is not needed.     Address can be sent as raw address. However to be GDPR compliant, tokenized address in  request should be sent. (optional)
     * @param  string $place_id To specify the placeID for which the nearest service points have to be searched. PlaceId refers to the ID provided by any provider for particular Address. Ex: Google (optional)
     * @param  string $provider_id To specify the providerId(provider) for the place ID (optional)
     * @param  string $latitude Latitude of user location. If address / servicePointID  parameter used, this parameter is not needed. (optional)
     * @param  string $longitude Longitude of user location. If address / servicePointID  parameter used, this parameter is not needed. It works in combination with the latitude parameter (optional)
     * @param  string $service_point_id Service Point ID is a unique key with 6 characters, consisting of Service Area for first 3 characters (e.g. BRU) and the last 3 characters is the Facility code (e.g. 001); Service point ID &#x3D; BRU001.     If address is used, id is not possible to use. (optional)
     * @param  string $country_code Only ISO 3166-1 - Alpha-2 for country code can be used, e.g. “NL”, “ES”, “GB”, “US”, “DE”, .... This country code is used for returning matching service points in that country.          When rendering the service point information, the time format (24h or AM/PM), and distance unit (km/miles) are derived from the country information stored in the GSPL database for the country specified via this parameter.     E.g. for countryCode&#x3D;GB will be time format AM/PM and distance unit will be mi.     E.g. for countryCode&#x3D;DE will be time format 24h and distance unit will be km.           The CountryCode is also used in the address search by Google/Bing to limit the results to the specified country (f.e. to avoid picking a street with the same name from a different country) (optional)
     * @param  string $language Language Code - represents the language. Mandatory if Script Code is provided or Language Country Code is provided, else optional. E.g. ‘eng’     Language Code is using ISO 3166-1 alpha-3 (3 letters) (optional)
     * @param  string $language_script_code Language Script Code - represents the writing system. Mandatory if Language Country Code is provided, else optional. (optional)
     * @param  string $language_country_code Language Country Code - can be used to differentiate between linguistic variants of the same Language. (optional)
     * @param  string $service_point_results Max. number of service points to be returned.      If id or idf is used, this parameter is not needed as this will return searched service point. (optional)
     * @param  string $capability Comma separated list of physical process capability codes.     81: I have a DHL account or return shipment     82: I have paid online     88: I will pay at the DHL Service Point     73: I will create a DHL shipping label at the DHL Service Point     74: I have printed a DHL label    75,76: I have a QR code    78,79: Im collecting a DHL Express parcel    86,87: I have directed a DHL Express parcel to a DHL Service Point    Possible Combinations : 81,73 | 81,74 | 81,75,76  | 82,74 | 82,75,76 | 88,73 | 78,79 | 86,87    Note: | is just used to represent the seperation of combinations. (optional)
     * @param  string $open_before Service points open Before given Time. E.g.: 14:00 will find service points which are open before 14:00 (optional)
     * @param  string $open_after Service points open After given time e.g.:15:00 will find service points which are open after 15:00 (optional)
     * @param  string[] $open_day Open on Weekday, valid values as follow:     1 - Monday     2 - Tuesday     3 - Wednesday     4 - Thursday     5 - Friday     6 - Saturday     0 – Sunday (optional)
     * @param  string $weight Max. weight of the shipment. Decimals are allowed as well (decimal separator either “,” or “.”) (optional)
     * @param  string[] $weight_uom Weight units – kg or lb. Required if weight is passed in. (optional)
     * @param  string $length Max. length of the shipment  - the highest dimension     e.g. 30. Decimals are allowed as well (decimal separator either “,” or “.”) (optional)
     * @param  string $width Max. width of the shipment  - the middle dimension     e.g. 20. Decimals are allowed as well (decimal separator either “,” or “.”) (optional)
     * @param  string $height Max. height of the shipment  - the lowest dimension     e.g. 10. Decimals are allowed as well (decimal separator either “,” or “.”) (optional)
     * @param  string[] $dimensions_uom Dimension units – cm or in. Required with any of length, width or height parameter. (optional)
     * @param  string[] $result_uom Distance uom to be used when returning response, it can be either km or mi. If not provided, default uom set for the country is returned. (optional)
     * @param  string $service_area_code Service Area Code of the search address (optional)
     * @param  string[] $service_point_types Comma separated list of service point types, e.g. “CTY,STN,247”.     Allowed Values:     CTY (City) - High street premises. DHL owned and managed. Eg. Downtown    STN (Station) - DHL premises. DHL owned and managed at PUD locations    PRT (Partner) - Partners(External) store. Eg. 7-Eleven, Shell    247 (24/7) - operating 24hours a day, has locker facility.  DHL owned and unmanned or / and automated (optional)
     * @param  string $max_distance Maximum distance in kilometers between the geocoded address and the returned Service Points. Values equal or less than 0 are ignored.     Accuracy of the maxDistance parameter:     The GREF web service uses a search rectangle for  Service Point searches. Therefore the maxDistance value is used to create a square with side length l &#x3D; maxDistance * 2. This means that the distance of some of the found Service Points may actually be longer as specified by the maxDistance parameter, if the Service Point is located outside the circle with radius r &#x3D; maxDistance, but still within the search square:     Centre point of the search square is the latitude/longitude pair resulting from a geocoding request to the Bing geocoding API, which in some cases may not represent the actual location of the address. The more precisely the address is specified, the higher is the probability that the geocoded location matches with the search address. (optional)
     * @param  string $piece_count_limit Static number, max pieces which can be handled on the service point. (optional)
     * @param  string[] $import_charges Y/N – indicator whether it is possible to pay import charges on service point. (optional)
     * @param  string $key Unique API key which required separate onboarding request to enable this service.  Please approach your country representative for onboarding. Once approval is granted, API key will be generated and used for authentication. (optional)
     * @param  string $combine_parameters Allows combination of values for parameters servicePointTypes and importChanges. Limitations:- Only 1 level of conditions is allowed (not multiple AND/OR)Applicable only on servicePointTypes and importCharges parameters “,” stands for OR condition “&amp;” stands for AND condition “()” splits multiple conditions. (optional)
     * @param  string $edd Estimated Delivery date:     YYYY-MM-DDThh:mm:ssTZD (for example 2023-06-25T22:59:00Z). This is a Servicepoint Capacity Management System Parameter to receive a capacity data of the found service points additionally calling Servicepoint Capacity Management System service. (optional)
     * @param  string[] $exclude_fully_booked Parameter which will enable to filter out fully booked services in the Service Point Locator response to client.     Values:     Y - Service Point Locator will not send back service points which are fully booked.     N - Service Point Locator will send back all service points, also those where is no free capacity.     If not provided in request, it will be set up as N by default.      This is a Servicepoint Capacity Management System parameter. (optional)
     * @param  string $shipment_id To specify the shipment ID. This is used for Servicepoint Capacity Management System parameter. (optional)
     * @param  string $piece_id Piece ID without Data Identifier / Prefix. (for example JD0081105201831337270 instead of JJD0081105201831337270). This is a Servicepoint Capacity Management System parameter. (optional)
     * @param  string $shipment_origin_service_area_code To specify the Shipment Origin Service Area Code. This is a Servicepoint Capacity Management System parameter. (optional)
     * @param  string[] $is_results_specific_capab_required This is to include preconfigured non UI capability codes(ex. PPC 72) to be considered while sending the request to Reference Data backend service. PPC 72 is applicable only for REST request and not for Service Point Locator UI. (optional)
     * @param  string[] $encrypt This &#39;encrypt&#39; flag is to indicate to Service Point Locator whether the address is tokenized(encrypt&#x3D;y) or non-tokenized. So that Service Point Locator can detokenize to provide matching Service Point list.          When &#39;encrypt&#x3D;y&#39;, Service Point Locator clients should mandatorily send tokenized address in the REST request.      When &#39;encrypt&#x3D;n&#39; or without &#39;encrypt&#39; parameter, client should only send non-tokenized address(raw address).     Sample below:            Non-tokenized(raw) address: Sabah, Malaysia           Tokenized address: YmtzOVpTQWdQSGRjSm41bFlDRkZjR0ZKSWc9PQ&#x3D;&#x3D;          Address Tokenization: Service Point Locator provides additional security to mask the address sent by the client in REST request which will hide raw address visible on the ‘View page Source’ or in ‘Developer tools. (optional)
     * @param  string[] $b64 This indicates whether the address parameter contains the base64 encoded value or not. (optional)
     * @param  string[] $svp_status ServicePoint Status(svpStatus) to be used especially when looking for inactive service points with the svpStatus S,U,X,Y. By default active svpStatus &#39;A&#39; is considered when this parameter is not sent in the request.   A &#x3D; Service Available (Open)  S &#x3D; Service Suspended (Temporarily closed)   U &#x3D; Service Unavailable (Temporarily closed)   Y &#x3D; Not Yet Open (Temporarily closed)   X &#x3D; Closed (Temporarily closed) (optional)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiServicepoints'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function expApiServicepointsAsyncWithHttpInfo($address = null, $place_id = null, $provider_id = null, $latitude = null, $longitude = null, $service_point_id = null, $country_code = null, $language = null, $language_script_code = null, $language_country_code = null, $service_point_results = null, $capability = null, $open_before = null, $open_after = null, $open_day = null, $weight = null, $weight_uom = null, $length = null, $width = null, $height = null, $dimensions_uom = null, $result_uom = null, $service_area_code = null, $service_point_types = null, $max_distance = null, $piece_count_limit = null, $import_charges = null, $key = null, $combine_parameters = null, $edd = null, $exclude_fully_booked = null, $shipment_id = null, $piece_id = null, $shipment_origin_service_area_code = null, $is_results_specific_capab_required = null, $encrypt = null, $b64 = null, $svp_status = null, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, string $contentType = self::contentTypes['expApiServicepoints'][0])
    {
        $returnType = '\MyDHL\Client\Model\ServicePointsRestResponseV3';
        $request = $this->expApiServicepointsRequest($address, $place_id, $provider_id, $latitude, $longitude, $service_point_id, $country_code, $language, $language_script_code, $language_country_code, $service_point_results, $capability, $open_before, $open_after, $open_day, $weight, $weight_uom, $length, $width, $height, $dimensions_uom, $result_uom, $service_area_code, $service_point_types, $max_distance, $piece_count_limit, $import_charges, $key, $combine_parameters, $edd, $exclude_fully_booked, $shipment_id, $piece_id, $shipment_origin_service_area_code, $is_results_specific_capab_required, $encrypt, $b64, $svp_status, $message_reference, $message_reference_date, $plugin_name, $plugin_version, $shipping_system_platform_name, $shipping_system_platform_version, $webstore_platform_name, $webstore_platform_version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'expApiServicepoints'
     *
     * @param  string $address The address near which Service Points are to be found. If servicePointID is used, address is not needed.     Address can be sent as raw address. However to be GDPR compliant, tokenized address in  request should be sent. (optional)
     * @param  string $place_id To specify the placeID for which the nearest service points have to be searched. PlaceId refers to the ID provided by any provider for particular Address. Ex: Google (optional)
     * @param  string $provider_id To specify the providerId(provider) for the place ID (optional)
     * @param  string $latitude Latitude of user location. If address / servicePointID  parameter used, this parameter is not needed. (optional)
     * @param  string $longitude Longitude of user location. If address / servicePointID  parameter used, this parameter is not needed. It works in combination with the latitude parameter (optional)
     * @param  string $service_point_id Service Point ID is a unique key with 6 characters, consisting of Service Area for first 3 characters (e.g. BRU) and the last 3 characters is the Facility code (e.g. 001); Service point ID &#x3D; BRU001.     If address is used, id is not possible to use. (optional)
     * @param  string $country_code Only ISO 3166-1 - Alpha-2 for country code can be used, e.g. “NL”, “ES”, “GB”, “US”, “DE”, .... This country code is used for returning matching service points in that country.          When rendering the service point information, the time format (24h or AM/PM), and distance unit (km/miles) are derived from the country information stored in the GSPL database for the country specified via this parameter.     E.g. for countryCode&#x3D;GB will be time format AM/PM and distance unit will be mi.     E.g. for countryCode&#x3D;DE will be time format 24h and distance unit will be km.           The CountryCode is also used in the address search by Google/Bing to limit the results to the specified country (f.e. to avoid picking a street with the same name from a different country) (optional)
     * @param  string $language Language Code - represents the language. Mandatory if Script Code is provided or Language Country Code is provided, else optional. E.g. ‘eng’     Language Code is using ISO 3166-1 alpha-3 (3 letters) (optional)
     * @param  string $language_script_code Language Script Code - represents the writing system. Mandatory if Language Country Code is provided, else optional. (optional)
     * @param  string $language_country_code Language Country Code - can be used to differentiate between linguistic variants of the same Language. (optional)
     * @param  string $service_point_results Max. number of service points to be returned.      If id or idf is used, this parameter is not needed as this will return searched service point. (optional)
     * @param  string $capability Comma separated list of physical process capability codes.     81: I have a DHL account or return shipment     82: I have paid online     88: I will pay at the DHL Service Point     73: I will create a DHL shipping label at the DHL Service Point     74: I have printed a DHL label    75,76: I have a QR code    78,79: Im collecting a DHL Express parcel    86,87: I have directed a DHL Express parcel to a DHL Service Point    Possible Combinations : 81,73 | 81,74 | 81,75,76  | 82,74 | 82,75,76 | 88,73 | 78,79 | 86,87    Note: | is just used to represent the seperation of combinations. (optional)
     * @param  string $open_before Service points open Before given Time. E.g.: 14:00 will find service points which are open before 14:00 (optional)
     * @param  string $open_after Service points open After given time e.g.:15:00 will find service points which are open after 15:00 (optional)
     * @param  string[] $open_day Open on Weekday, valid values as follow:     1 - Monday     2 - Tuesday     3 - Wednesday     4 - Thursday     5 - Friday     6 - Saturday     0 – Sunday (optional)
     * @param  string $weight Max. weight of the shipment. Decimals are allowed as well (decimal separator either “,” or “.”) (optional)
     * @param  string[] $weight_uom Weight units – kg or lb. Required if weight is passed in. (optional)
     * @param  string $length Max. length of the shipment  - the highest dimension     e.g. 30. Decimals are allowed as well (decimal separator either “,” or “.”) (optional)
     * @param  string $width Max. width of the shipment  - the middle dimension     e.g. 20. Decimals are allowed as well (decimal separator either “,” or “.”) (optional)
     * @param  string $height Max. height of the shipment  - the lowest dimension     e.g. 10. Decimals are allowed as well (decimal separator either “,” or “.”) (optional)
     * @param  string[] $dimensions_uom Dimension units – cm or in. Required with any of length, width or height parameter. (optional)
     * @param  string[] $result_uom Distance uom to be used when returning response, it can be either km or mi. If not provided, default uom set for the country is returned. (optional)
     * @param  string $service_area_code Service Area Code of the search address (optional)
     * @param  string[] $service_point_types Comma separated list of service point types, e.g. “CTY,STN,247”.     Allowed Values:     CTY (City) - High street premises. DHL owned and managed. Eg. Downtown    STN (Station) - DHL premises. DHL owned and managed at PUD locations    PRT (Partner) - Partners(External) store. Eg. 7-Eleven, Shell    247 (24/7) - operating 24hours a day, has locker facility.  DHL owned and unmanned or / and automated (optional)
     * @param  string $max_distance Maximum distance in kilometers between the geocoded address and the returned Service Points. Values equal or less than 0 are ignored.     Accuracy of the maxDistance parameter:     The GREF web service uses a search rectangle for  Service Point searches. Therefore the maxDistance value is used to create a square with side length l &#x3D; maxDistance * 2. This means that the distance of some of the found Service Points may actually be longer as specified by the maxDistance parameter, if the Service Point is located outside the circle with radius r &#x3D; maxDistance, but still within the search square:     Centre point of the search square is the latitude/longitude pair resulting from a geocoding request to the Bing geocoding API, which in some cases may not represent the actual location of the address. The more precisely the address is specified, the higher is the probability that the geocoded location matches with the search address. (optional)
     * @param  string $piece_count_limit Static number, max pieces which can be handled on the service point. (optional)
     * @param  string[] $import_charges Y/N – indicator whether it is possible to pay import charges on service point. (optional)
     * @param  string $key Unique API key which required separate onboarding request to enable this service.  Please approach your country representative for onboarding. Once approval is granted, API key will be generated and used for authentication. (optional)
     * @param  string $combine_parameters Allows combination of values for parameters servicePointTypes and importChanges. Limitations:- Only 1 level of conditions is allowed (not multiple AND/OR)Applicable only on servicePointTypes and importCharges parameters “,” stands for OR condition “&amp;” stands for AND condition “()” splits multiple conditions. (optional)
     * @param  string $edd Estimated Delivery date:     YYYY-MM-DDThh:mm:ssTZD (for example 2023-06-25T22:59:00Z). This is a Servicepoint Capacity Management System Parameter to receive a capacity data of the found service points additionally calling Servicepoint Capacity Management System service. (optional)
     * @param  string[] $exclude_fully_booked Parameter which will enable to filter out fully booked services in the Service Point Locator response to client.     Values:     Y - Service Point Locator will not send back service points which are fully booked.     N - Service Point Locator will send back all service points, also those where is no free capacity.     If not provided in request, it will be set up as N by default.      This is a Servicepoint Capacity Management System parameter. (optional)
     * @param  string $shipment_id To specify the shipment ID. This is used for Servicepoint Capacity Management System parameter. (optional)
     * @param  string $piece_id Piece ID without Data Identifier / Prefix. (for example JD0081105201831337270 instead of JJD0081105201831337270). This is a Servicepoint Capacity Management System parameter. (optional)
     * @param  string $shipment_origin_service_area_code To specify the Shipment Origin Service Area Code. This is a Servicepoint Capacity Management System parameter. (optional)
     * @param  string[] $is_results_specific_capab_required This is to include preconfigured non UI capability codes(ex. PPC 72) to be considered while sending the request to Reference Data backend service. PPC 72 is applicable only for REST request and not for Service Point Locator UI. (optional)
     * @param  string[] $encrypt This &#39;encrypt&#39; flag is to indicate to Service Point Locator whether the address is tokenized(encrypt&#x3D;y) or non-tokenized. So that Service Point Locator can detokenize to provide matching Service Point list.          When &#39;encrypt&#x3D;y&#39;, Service Point Locator clients should mandatorily send tokenized address in the REST request.      When &#39;encrypt&#x3D;n&#39; or without &#39;encrypt&#39; parameter, client should only send non-tokenized address(raw address).     Sample below:            Non-tokenized(raw) address: Sabah, Malaysia           Tokenized address: YmtzOVpTQWdQSGRjSm41bFlDRkZjR0ZKSWc9PQ&#x3D;&#x3D;          Address Tokenization: Service Point Locator provides additional security to mask the address sent by the client in REST request which will hide raw address visible on the ‘View page Source’ or in ‘Developer tools. (optional)
     * @param  string[] $b64 This indicates whether the address parameter contains the base64 encoded value or not. (optional)
     * @param  string[] $svp_status ServicePoint Status(svpStatus) to be used especially when looking for inactive service points with the svpStatus S,U,X,Y. By default active svpStatus &#39;A&#39; is considered when this parameter is not sent in the request.   A &#x3D; Service Available (Open)  S &#x3D; Service Suspended (Temporarily closed)   U &#x3D; Service Unavailable (Temporarily closed)   Y &#x3D; Not Yet Open (Temporarily closed)   X &#x3D; Closed (Temporarily closed) (optional)
     * @param  string $message_reference Please provide message reference (optional)
     * @param  string $message_reference_date Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2 (optional)
     * @param  string $plugin_name Please provide name of the plugin (applicable to 3PV only) (optional)
     * @param  string $plugin_version Please provide version of the plugin (applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_name Please provide name of the shipping platform(applicable to 3PV only) (optional)
     * @param  string $shipping_system_platform_version Please provide version of the shipping platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_name Please provide name of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $webstore_platform_version Please provide version of the webstore platform (applicable to 3PV only) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['expApiServicepoints'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function expApiServicepointsRequest($address = null, $place_id = null, $provider_id = null, $latitude = null, $longitude = null, $service_point_id = null, $country_code = null, $language = null, $language_script_code = null, $language_country_code = null, $service_point_results = null, $capability = null, $open_before = null, $open_after = null, $open_day = null, $weight = null, $weight_uom = null, $length = null, $width = null, $height = null, $dimensions_uom = null, $result_uom = null, $service_area_code = null, $service_point_types = null, $max_distance = null, $piece_count_limit = null, $import_charges = null, $key = null, $combine_parameters = null, $edd = null, $exclude_fully_booked = null, $shipment_id = null, $piece_id = null, $shipment_origin_service_area_code = null, $is_results_specific_capab_required = null, $encrypt = null, $b64 = null, $svp_status = null, $message_reference = null, $message_reference_date = null, $plugin_name = null, $plugin_version = null, $shipping_system_platform_name = null, $shipping_system_platform_version = null, $webstore_platform_name = null, $webstore_platform_version = null, string $contentType = self::contentTypes['expApiServicepoints'][0])
    {







































        if ($message_reference !== null && strlen($message_reference) > 36) {
            throw new \InvalidArgumentException('invalid length for "$message_reference" when calling ServicepointApi.expApiServicepoints, must be smaller than or equal to 36.');
        }
        if ($message_reference !== null && strlen($message_reference) < 28) {
            throw new \InvalidArgumentException('invalid length for "$message_reference" when calling ServicepointApi.expApiServicepoints, must be bigger than or equal to 28.');
        }
        

        if ($plugin_name !== null && strlen($plugin_name) > 20) {
            throw new \InvalidArgumentException('invalid length for "$plugin_name" when calling ServicepointApi.expApiServicepoints, must be smaller than or equal to 20.');
        }
        
        if ($plugin_version !== null && strlen($plugin_version) > 15) {
            throw new \InvalidArgumentException('invalid length for "$plugin_version" when calling ServicepointApi.expApiServicepoints, must be smaller than or equal to 15.');
        }
        
        if ($shipping_system_platform_name !== null && strlen($shipping_system_platform_name) > 20) {
            throw new \InvalidArgumentException('invalid length for "$shipping_system_platform_name" when calling ServicepointApi.expApiServicepoints, must be smaller than or equal to 20.');
        }
        
        if ($shipping_system_platform_version !== null && strlen($shipping_system_platform_version) > 15) {
            throw new \InvalidArgumentException('invalid length for "$shipping_system_platform_version" when calling ServicepointApi.expApiServicepoints, must be smaller than or equal to 15.');
        }
        
        if ($webstore_platform_name !== null && strlen($webstore_platform_name) > 20) {
            throw new \InvalidArgumentException('invalid length for "$webstore_platform_name" when calling ServicepointApi.expApiServicepoints, must be smaller than or equal to 20.');
        }
        
        if ($webstore_platform_version !== null && strlen($webstore_platform_version) > 15) {
            throw new \InvalidArgumentException('invalid length for "$webstore_platform_version" when calling ServicepointApi.expApiServicepoints, must be smaller than or equal to 15.');
        }
        

        $resourcePath = '/servicepoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $place_id,
            'placeId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $provider_id,
            'providerId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $latitude,
            'latitude', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $longitude,
            'longitude', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $service_point_id,
            'servicePointID', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country_code,
            'countryCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language_script_code,
            'languageScriptCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language_country_code,
            'languageCountryCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $service_point_results,
            'servicePointResults', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $capability,
            'capability', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $open_before,
            'openBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $open_after,
            'openAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $open_day,
            'openDay', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $weight,
            'weight', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $weight_uom,
            'weightUom', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $length,
            'length', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $width,
            'width', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $height,
            'height', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dimensions_uom,
            'dimensionsUom', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $result_uom,
            'resultUom', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $service_area_code,
            'serviceAreaCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $service_point_types,
            'servicePointTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_distance,
            'maxDistance', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $piece_count_limit,
            'pieceCountLimit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $import_charges,
            'importCharges', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $key,
            'key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $combine_parameters,
            'combineParameters', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $edd,
            'edd', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_fully_booked,
            'excludeFullyBooked', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shipment_id,
            'shipmentID', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $piece_id,
            'pieceID', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shipment_origin_service_area_code,
            'shipmentOriginServiceAreaCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_results_specific_capab_required,
            'isResultsSpecificCapabRequired', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $encrypt,
            'encrypt', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $b64,
            'b64', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $svp_status,
            'svpStatus', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($message_reference !== null) {
            $headerParams['Message-Reference'] = ObjectSerializer::toHeaderValue($message_reference);
        }
        // header params
        if ($message_reference_date !== null) {
            $headerParams['Message-Reference-Date'] = ObjectSerializer::toHeaderValue($message_reference_date);
        }
        // header params
        if ($plugin_name !== null) {
            $headerParams['Plugin-Name'] = ObjectSerializer::toHeaderValue($plugin_name);
        }
        // header params
        if ($plugin_version !== null) {
            $headerParams['Plugin-Version'] = ObjectSerializer::toHeaderValue($plugin_version);
        }
        // header params
        if ($shipping_system_platform_name !== null) {
            $headerParams['Shipping-System-Platform-Name'] = ObjectSerializer::toHeaderValue($shipping_system_platform_name);
        }
        // header params
        if ($shipping_system_platform_version !== null) {
            $headerParams['Shipping-System-Platform-Version'] = ObjectSerializer::toHeaderValue($shipping_system_platform_version);
        }
        // header params
        if ($webstore_platform_name !== null) {
            $headerParams['Webstore-Platform-Name'] = ObjectSerializer::toHeaderValue($webstore_platform_name);
        }
        // header params
        if ($webstore_platform_version !== null) {
            $headerParams['Webstore-Platform-Version'] = ObjectSerializer::toHeaderValue($webstore_platform_version);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
